import 'dotenv/config';import fs from 'node:fs/promises';import path from 'node:path';import { createPublicClient, http, isAddress } from 'viem';import { giwaSepolia } from './config.mjs';
const L2_RPC=process.env.L2_RPC||'https://sepolia-rpc.giwa.io';const RPC_TIMEOUT_MS=Number(process.env.RPC_TIMEOUT_MS||30000);
const COUNT=Number(process.env.COUNT||50);const LOOKBACK_BLOCKS=Number(process.env.LOOKBACK_BLOCKS||2000);const MAX_SCAN=Number(process.env.MAX_SCAN||LOOKBACK_BLOCKS);const OUT=process.env.OUT||'data/targets.txt';
const sleep=(ms)=>new Promise(r=>setTimeout(r,ms));
async function fetchRandomEOAs(publicClient,wantCount){const tip=await publicClient.getBlockNumber();const candidates=new Set();for(let i=0n;i<BigInt(MAX_SCAN);i++){const bn=tip-i;if(bn<1n||i>=BigInt(LOOKBACK_BLOCKS))break;const block=await publicClient.getBlock({blockNumber:bn,includeTransactions:true});for(const tx of block.transactions){if(tx.from)candidates.add(tx.from);if(tx.to)candidates.add(tx.to);}if(candidates.size>wantCount*6)break;if(i%50n===0n&&i!==0n)await sleep(100);}const arr=Array.from(candidates).filter(a=>isAddress(a));const eoas=[];for(const a of arr){try{const code=await publicClient.getBytecode({address:a});if(code===null)eoas.push(a);}catch{}if(eoas.length>=wantCount*2)break;}const picks=[];while(picks.length<wantCount&&eoas.length){const idx=Math.floor(Math.random()*eoas.length);const [chosen]=eoas.splice(idx,1);if(!picks.includes(chosen))picks.push(chosen);}return picks;}
async function main(){const publicClient=createPublicClient({chain:giwaSepolia,transport:http(L2_RPC,{timeout:RPC_TIMEOUT_MS})});const picks=await fetchRandomEOAs(publicClient,COUNT);await fs.mkdir(path.dirname(OUT),{recursive:true});await fs.writeFile(OUT,picks.join('\n')+'\n','utf8');console.log(`Saved ${picks.length} EOA to ${OUT}`);}main().catch(e=>{console.error(e);process.exit(1);});
